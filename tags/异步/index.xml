<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>异步 on 个人博客</title><link>https://fallingheaven.github.io/tags/%E5%BC%82%E6%AD%A5/</link><description>Recent content in 异步 on 个人博客</description><generator>Hugo -- gohugo.io</generator><language>zh-cn</language><copyright>FallingHeaven</copyright><lastBuildDate>Sun, 20 Apr 2025 00:00:00 +0000</lastBuildDate><atom:link href="https://fallingheaven.github.io/tags/%E5%BC%82%E6%AD%A5/index.xml" rel="self" type="application/rss+xml"/><item><title>C# ThreadPool、Task、UniTask 对比与分析</title><link>https://fallingheaven.github.io/p/c%23-threadpooltaskunitask-%E5%AF%B9%E6%AF%94%E4%B8%8E%E5%88%86%E6%9E%90/</link><pubDate>Sun, 20 Apr 2025 00:00:00 +0000</pubDate><guid>https://fallingheaven.github.io/p/c%23-threadpooltaskunitask-%E5%AF%B9%E6%AF%94%E4%B8%8E%E5%88%86%E6%9E%90/</guid><description>&lt;h1 id="c-threadpooltaskunitask-对比与分析">C# ThreadPool、Task、UniTask 对比与分析
&lt;/h1>&lt;h2 id="1-threadpool">1. ThreadPool
&lt;/h2>&lt;ul>
&lt;li>&lt;strong>核心概念&lt;/strong>：.NET Framework 提供的线程复用机制，避免频繁创建销毁线程。&lt;/li>
&lt;li>&lt;strong>适用场景&lt;/strong>：短小的后台任务，通常不直接操作。&lt;/li>
&lt;li>&lt;strong>参考&lt;/strong>：&lt;a class="link" href="https://www.cnblogs.com/eventhorizon/p/15316955.html" target="_blank" rel="noopener"
>.Net线程池原理简单解释&lt;/a>&lt;/li>
&lt;/ul>
&lt;h2 id="2-task">2. Task
&lt;/h2>&lt;ul>
&lt;li>&lt;strong>核心概念&lt;/strong>：异步操作的抽象，支持 async/await，通常调度到 ThreadPool。&lt;/li>
&lt;li>&lt;strong>优点&lt;/strong>：简化异步编程，支持组合、异常处理、取消等。&lt;/li>
&lt;li>&lt;strong>参考&lt;/strong>：&lt;a class="link" href="https://learn.microsoft.com/zh-cn/dotnet/api/system.threading.tasks.task?view=net-8.0" target="_blank" rel="noopener"
>Task微软官方文档&lt;/a>&lt;/li>
&lt;/ul>
&lt;h2 id="3-unity-中的-task">3. Unity 中的 Task
&lt;/h2>&lt;ul>
&lt;li>&lt;strong>注意事项&lt;/strong>：Unity 大部分 API 只能在主线程调用，直接用 Task 需注意线程同步和 GC 问题。&lt;/li>
&lt;li>&lt;strong>参考&lt;/strong>：&lt;a class="link" href="https://heerozh.com/post/unity-async-yi-bu-bian-cheng-ren-hua-zong-jie/" target="_blank" rel="noopener"
>Unity的Task和.Net的Task的不同&lt;/a>&lt;/li>
&lt;/ul>
&lt;h2 id="4-unitask">4. UniTask
&lt;/h2>&lt;ul>
&lt;li>&lt;strong>核心概念&lt;/strong>：专为 Unity 优化的高性能 async/await 库，零 GC 分配，深度集成 Unity 生命周期。&lt;/li>
&lt;li>&lt;strong>优势&lt;/strong>：支持 PlayerLoop、AsyncOperation、生命周期绑定、线程切换等。&lt;/li>
&lt;li>&lt;strong>参考&lt;/strong>：&lt;a class="link" href="https://github.com/Cysharp/UniTask/blob/master/README_CN.md" target="_blank" rel="noopener"
>UniTask仓库ReadMe&lt;/a>&lt;/li>
&lt;/ul>
&lt;h2 id="5-总结与对比">5. 总结与对比
&lt;/h2>&lt;ul>
&lt;li>ThreadPool 是底层，Task 是更高级抽象，UniTask 是针对 Unity 优化的 Task 替代品。&lt;/li>
&lt;li>Unity 项目推荐优先使用 UniTask 进行异步编程。&lt;/li>
&lt;/ul>
&lt;hr>
&lt;blockquote>
&lt;p>你可以根据自己的理解和实际项目经验，补充代码示例、性能对比、最佳实践等内容。&lt;/p>&lt;/blockquote></description></item></channel></rss>