<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>C# 专题 on Hugo Book</title>
    <link>http://localhost:1313/Unity/C%23/</link>
    <description>Recent content in C# 专题 on Hugo Book</description>
    <generator>Hugo</generator>
    <language>zh-cn</language>
    <lastBuildDate>Sat, 01 Jun 2024 00:00:00 +0000</lastBuildDate>
    <atom:link href="http://localhost:1313/Unity/C%23/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>C# ThreadPool、Task、UniTask 对比与分析</title>
      <link>http://localhost:1313/Unity/C%23/%E5%85%B3%E4%BA%8EC%23%E4%B8%AD%E7%9A%84%E5%A4%9A%E7%BA%BF%E7%A8%8B%E5%92%8C%E5%BC%82%E6%AD%A5%E6%96%B9%E6%B3%95/</link>
      <pubDate>Sat, 01 Jun 2024 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/Unity/C%23/%E5%85%B3%E4%BA%8EC%23%E4%B8%AD%E7%9A%84%E5%A4%9A%E7%BA%BF%E7%A8%8B%E5%92%8C%E5%BC%82%E6%AD%A5%E6%96%B9%E6%B3%95/</guid>
      <description>&lt;h1 id=&#34;c-threadpooltaskunitask-对比与分析&#34;&gt;&#xD;&#xA;  C# ThreadPool、Task、UniTask 对比与分析&#xD;&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#c-threadpooltaskunitask-%e5%af%b9%e6%af%94%e4%b8%8e%e5%88%86%e6%9e%90&#34;&gt;#&lt;/a&gt;&#xD;&#xA;&lt;/h1&gt;&#xD;&#xA;&lt;h2 id=&#34;1-threadpool&#34;&gt;&#xD;&#xA;  1. ThreadPool&#xD;&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#1-threadpool&#34;&gt;#&lt;/a&gt;&#xD;&#xA;&lt;/h2&gt;&#xD;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;strong&gt;核心概念&lt;/strong&gt;：.NET Framework 提供的线程复用机制，避免频繁创建销毁线程。&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;适用场景&lt;/strong&gt;：短小的后台任务，通常不直接操作。&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;参考&lt;/strong&gt;：&#xD;&#xA;  &lt;a href=&#34;https://www.cnblogs.com/eventhorizon/p/15316955.html&#34;&gt;.Net线程池原理简单解释&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;2-task&#34;&gt;&#xD;&#xA;  2. Task&#xD;&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#2-task&#34;&gt;#&lt;/a&gt;&#xD;&#xA;&lt;/h2&gt;&#xD;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;strong&gt;核心概念&lt;/strong&gt;：异步操作的抽象，支持 async/await，通常调度到 ThreadPool。&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;优点&lt;/strong&gt;：简化异步编程，支持组合、异常处理、取消等。&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;参考&lt;/strong&gt;：&#xD;&#xA;  &lt;a href=&#34;https://learn.microsoft.com/zh-cn/dotnet/api/system.threading.tasks.task?view=net-8.0&#34;&gt;Task微软官方文档&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;3-unity-中的-task&#34;&gt;&#xD;&#xA;  3. Unity 中的 Task&#xD;&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#3-unity-%e4%b8%ad%e7%9a%84-task&#34;&gt;#&lt;/a&gt;&#xD;&#xA;&lt;/h2&gt;&#xD;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;strong&gt;注意事项&lt;/strong&gt;：Unity 大部分 API 只能在主线程调用，直接用 Task 需注意线程同步和 GC 问题。&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;参考&lt;/strong&gt;：&#xD;&#xA;  &lt;a href=&#34;https://heerozh.com/post/unity-async-yi-bu-bian-cheng-ren-hua-zong-jie/&#34;&gt;Unity的Task和.Net的Task的不同&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;4-unitask&#34;&gt;&#xD;&#xA;  4. UniTask&#xD;&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#4-unitask&#34;&gt;#&lt;/a&gt;&#xD;&#xA;&lt;/h2&gt;&#xD;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;strong&gt;核心概念&lt;/strong&gt;：专为 Unity 优化的高性能 async/await 库，零 GC 分配，深度集成 Unity 生命周期。&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;优势&lt;/strong&gt;：支持 PlayerLoop、AsyncOperation、生命周期绑定、线程切换等。&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;参考&lt;/strong&gt;：&#xD;&#xA;  &lt;a href=&#34;https://github.com/Cysharp/UniTask/blob/master/README_CN.md&#34;&gt;UniTask仓库ReadMe&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;5-总结与对比&#34;&gt;&#xD;&#xA;  5. 总结与对比&#xD;&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#5-%e6%80%bb%e7%bb%93%e4%b8%8e%e5%af%b9%e6%af%94&#34;&gt;#&lt;/a&gt;&#xD;&#xA;&lt;/h2&gt;&#xD;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;ThreadPool 是底层，Task 是更高级抽象，UniTask 是针对 Unity 优化的 Task 替代品。&lt;/li&gt;&#xA;&lt;li&gt;Unity 项目推荐优先使用 UniTask 进行异步编程。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;hr&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;你可以根据自己的理解和实际项目经验，补充代码示例、性能对比、最佳实践等内容。&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
