<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>C#基础 on 演示站点</title>
        <link>http://localhost:1313/categories/c%23%E5%9F%BA%E7%A1%80/</link>
        <description>Recent content in C#基础 on 演示站点</description>
        <generator>Hugo -- gohugo.io</generator>
        <language>zh-cn</language>
        <copyright>Example Person</copyright><atom:link href="http://localhost:1313/categories/c%23%E5%9F%BA%E7%A1%80/index.xml" rel="self" type="application/rss+xml" /><item>
        <title>C# ThreadPool、Task、UniTask 对比与分析</title>
        <link>http://localhost:1313/p/c%23-threadpooltaskunitask-%E5%AF%B9%E6%AF%94%E4%B8%8E%E5%88%86%E6%9E%90/</link>
        <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
        
        <guid>http://localhost:1313/p/c%23-threadpooltaskunitask-%E5%AF%B9%E6%AF%94%E4%B8%8E%E5%88%86%E6%9E%90/</guid>
        <description>&lt;h1 id=&#34;c-threadpooltaskunitask-对比与分析&#34;&gt;C# ThreadPool、Task、UniTask 对比与分析
&lt;/h1&gt;&lt;h2 id=&#34;1-threadpool&#34;&gt;1. ThreadPool
&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;核心概念&lt;/strong&gt;：.NET Framework 提供的线程复用机制，避免频繁创建销毁线程。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;适用场景&lt;/strong&gt;：短小的后台任务，通常不直接操作。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;参考&lt;/strong&gt;：&lt;a class=&#34;link&#34; href=&#34;https://www.cnblogs.com/eventhorizon/p/15316955.html&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;.Net线程池原理简单解释&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;2-task&#34;&gt;2. Task
&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;核心概念&lt;/strong&gt;：异步操作的抽象，支持 async/await，通常调度到 ThreadPool。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;优点&lt;/strong&gt;：简化异步编程，支持组合、异常处理、取消等。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;参考&lt;/strong&gt;：&lt;a class=&#34;link&#34; href=&#34;https://learn.microsoft.com/zh-cn/dotnet/api/system.threading.tasks.task?view=net-8.0&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Task微软官方文档&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;3-unity-中的-task&#34;&gt;3. Unity 中的 Task
&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;注意事项&lt;/strong&gt;：Unity 大部分 API 只能在主线程调用，直接用 Task 需注意线程同步和 GC 问题。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;参考&lt;/strong&gt;：&lt;a class=&#34;link&#34; href=&#34;https://heerozh.com/post/unity-async-yi-bu-bian-cheng-ren-hua-zong-jie/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Unity的Task和.Net的Task的不同&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;4-unitask&#34;&gt;4. UniTask
&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;核心概念&lt;/strong&gt;：专为 Unity 优化的高性能 async/await 库，零 GC 分配，深度集成 Unity 生命周期。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;优势&lt;/strong&gt;：支持 PlayerLoop、AsyncOperation、生命周期绑定、线程切换等。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;参考&lt;/strong&gt;：&lt;a class=&#34;link&#34; href=&#34;https://github.com/Cysharp/UniTask/blob/master/README_CN.md&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;UniTask仓库ReadMe&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;5-总结与对比&#34;&gt;5. 总结与对比
&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;ThreadPool 是底层，Task 是更高级抽象，UniTask 是针对 Unity 优化的 Task 替代品。&lt;/li&gt;
&lt;li&gt;Unity 项目推荐优先使用 UniTask 进行异步编程。&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;blockquote&gt;
&lt;p&gt;你可以根据自己的理解和实际项目经验，补充代码示例、性能对比、最佳实践等内容。&lt;/p&gt;&lt;/blockquote&gt;
</description>
        </item>
        
    </channel>
</rss>
